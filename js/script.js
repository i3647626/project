"use strict";/* директива строгого режима ДжаваСкрипта */
console.log(1);

/* 5. Урок. Способы объявления переменных (переменная не должна начинаться с цифры
и повторять зарезервировааные слова типа Error, Alert)
Переменные написанные в разном регистре - разные переменные
В старых браузерах могут не поддерживаться новые форматы задания переменных (нужно проверять на сайте Can I Use) */
let number = 1; /* let изменяемая переменная */
const leftBorderWidth = 1;/* const константа значение переменной нельзя изменять. Хороший тон использовать const везде, где это возможно */
var name = "Ivan";/* устаревший способ задания переменной. Изменяем так же как и let. По возможности не использовать. Существует до того как была объявлена (хостик). */

/* Пробуем изменить переменные */
number = 10 /* Задаем другое значение переменной, объявленной командой let */
console.log (number); /* Выводим в консоль. Переменная let number изменила значение с 1 на 10 */
leftBorderWidth = 10; /* Задаем другое значение переменной, объявленной командой cost */
console.log (leftBorderWidth); /* Выводим в консоль. Переменная const leftBorderWidth не может менять значение*/
/* Прямых констант в /ДжаваСкрипте не бывает */
const obj = {
    a : 50/* двоеточие вместо знака принадлежности */
};
obj.a = 10; /* изменение значения переменной obj */
console.log (obj); /* вывод в консоль значения переменной const obj (значение изменилось) */


/* 6 Урок. Типы данных ДжаваСкрипта */
/* Простые типы: Числа (1, 2, 3); Строки "string", "name"; Логический тип "boolean" true, false; Null; Undefind; Symbol; Bigint*/
/* Объекты: Массивы [], Функции, Объекты Даты, Регулярные выражения, Ошибки*/

/* Простые типы */
/* Числа */
let number = 4.6; /* для дробей нужно использовать точку */
console.log(4/0); /* получае infinity (бесконечность) также можно получить минус бесконечность*/
console.log ("string"*9); /* ошибка при умножении строки на число Nan (not a number)  */

/* Строки */
const person = "5"; /* тип данных строка. Обязательный атрибут ковычки. Можно использовать одинарные, двойные и косые (бектики) */

/* Логический тип данных */
const bool = false;

/* Null */
/* Ошибка ссылочного типа */

/* Undefind */
let und; /* переменная объявлена, но в ней нет значения. Переменная пустая */
console.log(und); /* в консоль выводится undefind */

/* Объекты (объект - коллекция данных)*/
const obj1 = {
    name: "John",/* свойство объекта */
    age: 25,  /*свойство объекта */
    isMarried: false /* свойство объекта */
};
console.log(obj1.name); /* 1 - й способ обращения к свойству name внутри переменной obj1 */
console.log(obj1["name"]); /* 2 - й способ обращения к свойству name внутри переменной obj1 */

/* Массив - частный случай объекта*/
let arr = ["plump.png", "orange.jpg", "orange.bmp", 1, {}];/* у массива квадратные скобки! Могут включать любые типы данных. */
console.log(arr[1]);/* выводим второй элемент массива по порядку (orange.jpg). Нумерация начинается с нулевого элемента. */ 

/* 7 Урок. Простое общение с пользователем */
/* Команды allert, confirm, promt нужно тестировать в браузере. Консоль VS code не знает этих команд */
alert(Hello); /* предупреждение или информирование пользователя */
const result = confirm("Are you here?"); /* выводит окно с возможностью ответа Да/Нет. Переменная может принять значение  */
const answer = prompt("Вам есть 18?", ""); /* пустые кавычкуи для произвольного ответа пользователя. Можно поставить значение по умолчанию в кавычках. Тип данных строка. Вся информация, которая приходит от пользователя будет Строкой */
console.log(typeof(answer)); /* команда для выяснения типа данных переменной. В консоли браузера будет указан тип данных */

const answers = [];/* создаем пустой массив */
answers[0] = prompt("Как Ваше имя?", ""); /* пользователь вносит ответы и формирует значения элементов массива */
answers[1] = prompt("Как Ваша фамилия?", ""); /* пользователь вносит ответы и формирует значения элементов массива */
answers[2] = prompt("Сколько Вам лет?", ""); /* пользователь вносит ответы и формирует значения элементов массива */
document.write(answers); /* команда выводит в браузер результат заполнения массива. Замещает всю страницу нашей информацией. Используется редко. */
console.log(typeof(answers));/* тип данных object. Доказательство, что массив частный случай объекта */
console.log(typeof(null));/* тип данных object. Официально признанная ошибка */


/* 8 Урок. Интерполяция ES6 (новый стандарт) */

const category = "toys";
console.log("https://someurl.com/" + category);/* Конкатинация строк в старом стандарте. Любые ковычки и знак + */

const category = "toys";
console.log(`https://someurl.com/${category}/5`);/* Конкотинация происходит в бектиках (косых ковычках). Синтаксис в примере */

const user = "Ivan";
alert (`Hello, ${user}`); /* в браузере будет выведено Hello, Ivan */


/* Урок 9. Операторы в ДжаваСкрипте */
console.log(4 + +"5"); /* знак + перед строкой превращает ее тип данных в число (происходит сложение вместо конкатинации). + называется унарным (использует только один аргумент)*/

let incr = 10,
    decr = 10; /* еще один способ объявления переменных */

incr++; /* доращивания аргумента на единицу (постфиксная форма записи) */
decr--; /* уменьшение аргумента на единицу (постфиксная форма записи)*/
console.log (incr); /* результат доращивания */
console.log (decr);/* результат уменьшения */
console.log (incr++); /* при постфиксной форме в начале выводится переменная без доращивания */
console.log (decr--);/* при постфиксной форме в начале выводится переменная без уменьшения */
console.log (++incr); /* префиксная форма записи инкремента. Переменная сразу увеличивается*/
console.log (--decr);/* префиксная форма записи дикремента. Переменная сразу уменьшается */

console.log(5%2);/* % выводит остаток от деления двух чисел. Пять разделил на два на столько, сколько возможно и вывел остаток от деления*/

console.log(4*2 == 8);/* == оператор сравнения 4*2 == 8 (True). 8 - число*/ 
console.log(4*2 == "8");/* == оператор сравнения 4*2 == 8 (True). Хотя 8 - строка. Сравнение идет по значению, а не по типу данных (True)*/
console.log(4*2 === "8");/* === оператор строгого сравнения по типу данных 4*2 === 8 (False). 8 - строка. Сравнение идет по типу данных, а не по значению*/

const isCheked = true,
      isClose = true;
console.log(isCheked && isClose); /* && оператор "И" выводит True, если два или более аргументов True. Если хотя бы один False, то он выведет False */

const isCheked = true,
      isClose = true;
console.log(isCheked || !isClose); /* || оператор "Или" выводит True, если хотя бы один аргумент True. Если все False, то он выведет False.
                                       ! - знак отрицания (True превратилась в False)
                                       != - не равно*/


/* 10 Урок. Система контроля версий Git и хранилище Github */
/* После установки Git прописать в Терминале (командной строке) git init. Команда создает скрытую папку в папке проекта*/
/* /Устанавливаем Имя пользователя и Почтовый ящик. Прописываем в терминал команды конфигурации: git config --global user.name "Ivan" */
/* git config --global user.email example@gmail.com Команды задаются глобально, а не локально как в прмере. Результат отобразится в скрытой папке Git, файле Config*/
/* git status Команда показывает статус проекта. Контрольная точка называется comit/ Файлы просто существуют. Git за ними не следит. */
/* git add -A Команда добавить All - добавляет все файлы в индекс для отслеживания */
/* git add main.css Добавил новый файл в Индекс для отслеживания */
/* git commit -a -m"first commit" Команда делает первую точку восстановления -a добавить все файлы all, -m комментарий*/
/* После внесения изменений в какой-либо файл он попадает в первое состояние. */
/* Чтобы вернуть его во второе Индекс отслеживания нужно прописать git add -A (все файлы). Чтобы закомитить второе изменение git commit -a -m"second commit*/